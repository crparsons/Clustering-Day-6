getwd()
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
expression <- factor(expression)
expression
source('~/.active-rstudio-document', echo=TRUE)
df
source('~/.active-rstudio-document', echo=TRUE)
list1
?mean
# adding 90 to the end of the glengths vector (or 30 to the beginning)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
round(3.14159, digits = 2)
?round
?read
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
metadata
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
A
source('~/.active-rstudio-document', echo=TRUE)
A %in% B
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
a <- 1
a
https://bioconductor.org/biocLite.R
http://bioconductor.org/biocLite.R"
source(https://bioconductor.org/biocLite.R)
source(http://bioconductor.org/biocLite.R)
source("http://bioconductor.org/biocLite.R")
library(curl)
my_data <- read.table("../unifiedScaledFiltered.txt",sep="\t",header=1)
library(curl)
my_data <- read.table(curl("https://tcga-data.nci.nih.gov/docs/publications/gbm_exp/unifiedScaledFiltered.txt"),sep="\t",header=1)
biocLite("curl")
library(curl)
my_data <- read.table(curl("https://tcga-data.nci.nih.gov/docs/publications/gbm_exp/unifiedScaledFiltered.txt"),sep="\t",header=1)
my_data
dim(my_data)
mean(10, )
mean(dim[10,])
mean(my_data["CD38"])
mean(my_data["CD38", ])
mean(as.numeric(my_data["CD38", ]))
mean(as.numeric(my_data["SDC2", ]))
apply(my_data, 1, mean)
apply(my_data, 2, mean)
min(my_data[1,])
min(my_data)
min(my_data[ ,])
apply(my_data,1,max)
head(apply(my_data, 1, max))
head(apply(my_data, 1, min))
std(apply(my_data, 1, min))
sd(apply(my_data, 1, min))
sd(apply(my_data, 1, max))
sd(apply(my_data, 2, max))
max(apply(my_data, 1, sd))
which.max(apply(my_data, 1, sd))
max(apply(my_data))
max(apply(my_data, 1))
max(apply(my_data, 1, max))
which.max(apply(my_data, 1, max))
which.max(apply(my_data, 2, max))
hist(my_data)
?hist
hist(my_data, breaks = "Histogram of EGFR expression")
hist(as.numeric(my_data))
hist(as.numeric(my_data), breaks = "Histogram of EGFR expression")
hist(my_data["EGFR"",])
hist(my_data["EGFR",], "Histogram of EGFR expression")
hist(as.numeric(my_data["EGFR",]), "Histogram of EGFR expression")
hist(as.numeric(my_data["EGFR",]))
hist(as.numeric(my_data[,"EGFR"]))
hist(as.numeric(my_data["EGFR",]), "Histogram of EGFR expression")
hist(as.numeric(my_data["EGFR",]), main = paste("Histogram of EGFR expression"))
hist(as.numeric(my_data["EGFR",]), main = paste("Histogram of EGFR expression", breaks = 1000))
hist(as.numeric(my_data["EGFR",]), breaks = 1000, main = paste("Histogram of EGFR expression"))
hist(as.numeric(my_data["EGFR",]), breaks = 30, main = paste("Histogram of EGFR expression"))
hist(as.numeric(my_data["EGFR",]), xlab = "EGFR expression", ylab = "Frequency (# of samples)", breaks = 1000, main = paste("Histogram of EGFR expression"))
hist(as.numeric(my_data["EGFR",]), xlab = "EGFR expression", ylab = "Frequency (# of samples)", breaks = 30, main = paste("Histogram of EGFR expression"))
?plot
plot(as.numeric(my_data["EGFR", "IGF1"]))
plot(as.numeric(my_data["EGFR", "IGF1"]))
plot(as.numeric(my_data["EGFR", "IGF1"], pch = 2))
plot(as.numeric(my_data["EGFR"]))
plot(as.numeric(my_data["EGFR"]), as.numeric(my_data["EGFR"]))
as.numeric(my_data["EGFR", ])
histo(as.numeric(my_data["EGFR", ]))
hist(as.numeric(my_data["EGFR", ]))
plot
plot(as.numeric(my_data["EGFR", ]), as.numeric(my_data["IDH1", ]))
plot(as.numeric(my_data["EGFR", ]), as.numeric(my_data["IDH1", ]), xlab = "EGFR expression", ylab = "IDH1 expression")
plot(as.numeric(my_data["EGFR", ]), as.numeric(my_data["IDH1", ]), xlab = "EGFR expression", ylab = "IDH1 expression", main = paste("EGFR versus IDH1"))
plot(as.numeric(my_data["EGFR", ]), as.numeric(my_data["IDH1", ]), xlab = "EGFR expression", ylab = "IDH1 expression", main = paste("EGFR versus IDH1"), type = p)
plot(as.numeric(my_data["EGFR", ]), as.numeric(my_data["IDH1", ]), xlab = "EGFR expression", ylab = "IDH1 expression", main = paste("EGFR versus IDH1"), type = "p")
plot(as.numeric(my_data["EGFR", ]), as.numeric(my_data["IDH1", ]), xlab = "EGFR expression", ylab = "IDH1 expression", main = paste("EGFR versus IDH1"), type = "p", pch = 19)
plot(as.numeric(my_data["EGFR", ]), as.numeric(my_data["IDH1", ]), xlab = "EGFR expression", ylab = "IDH1 expression", main = paste("EGFR versus IDH1"), type = "p", pch = 5)
plot(as.numeric(my_data["EGFR", ]), as.numeric(my_data["IDH1", ]), xlab = "EGFR expression", ylab = "IDH1 expression", main = paste("EGFR versus IDH1"), type = "p", pch = 4)
plot(as.numeric(my_data["EGFR", ]), as.numeric(my_data["IDH1", ]), xlab = "EGFR expression", ylab = "IDH1 expression", main = paste("EGFR versus IDH1"), type = "p", pch = 20)
?grep
grep(ZNF, my_data)
grep("ZNF", my_data)
grep("ZNF", my_data, ignore.case = TRUE)
grep("ZFN", my_data, ignore.case = TRUE)
grep("ZFN", rownames(my_data))
grep("ZNF", rownames(my_data))
grep("ZNF", my_data)
length(grep("ZNF", my_data)
length(grep("ZNF", my_data))
length(grep("ZNF", rownames(my_data)))
names <- rownames(my_data)
idx <- grep("ZNF", rownames(my_data))
names[idx]
boxplot("ZNF")
?boxplot
boxplot(idx)
boxplot(idx)
bloxplot(names)
boxplot(names[idx])
idx <- grep("ZNF", rownames(my_data))
names
?avg
?average
mean("ZNF", my_data)
mean(as.numeric(my_data["ZNF", })
mean(as.numeric(my_data["ZNF", ])
mean(as.numeric(my_data["ZNF", ]))
mean(as.numeric(my_data[, "ZNF"]))
mean(my_data["ZNF", ])
boxplot("ZNF", data = my_data)
boxplot("ZNF", rownames(my_data))
boxplot("ZNF", data = my_data, notch = TRUE)
boxplot(my_data["ZNF", ], data = my_data, notch = TRUE)
boxplot(my_data[idx], data = my_data, notch = TRUE)
boxplot(my_data[idx, ], data = my_data, notch = TRUE)
boxplot(mean(my_data[idx, ]), data = my_data, notch = TRUE)
mean(my_data[idx, ])
mean(as.numeric(my_data[idx, ]))
boxplot(mean(my_data[idx, ]), data = my_data, notch = TRUE)
meanznf <- mean(apply(my_data["ZNF",]))
meanznf <- c(apply(mean(my_data["ZNF",])))
meanznf <- c(apply())
my_vector <- c(10,5,2,6,8,4,1,9,3,7)
order(my_vector)
my_vector[order()]
order(my_vector)
mean(as.numeric(my_data["ZNF", ]))
mean(apply(my_data["ZNF", ]))
mean(apply(my_data[1, ]))
znfbox <- (apply(my_data[idx, ]))
znfbox <- (apply(my_data[idx, ], 2))
znfbox <- (apply(my_data[idx, ], 2, mean))
allbox <- (apply(my_data, 2, mean))
boxplot(znfbox, allbox)
boxplot((znfbox, xlab = Average ZNF), allbox, main = "ZNF gene expression versus all genes")
boxplot((znfbox, xlab = "Average ZNF"), allbox, main = "ZNF gene expression versus all genes")
boxplot(znfbox, allbox, main = "ZNF gene expression versus all genes", notch = TRUE)
boxplot(znfbox, allbox, main = "ZNF gene expression versus all genes", notch = TRUE, ylab = "Expression")
boxplot(znfbox, allbox, main = "ZNF gene expression versus all genes", notch = TRUE, ylab = "Expression", names = c("Average ZNF", "Average of All Genes"))
sort(my_vector)
putinorder <- function(sort(my_vector))
putinorder <- function(sort(my_vector)
putinorder <- function() {}
selectionsort.loop <- function(x)
{
lenx <- length(x)
for(i in my_vector)
{
mini <- (i - 1) + which.min([i:lenx])
start_ <- seq_len(i - 1)
x <- c(x[start_], x[mini], x[-c(start_, mini)])
}
x
}
selectionsort.loop <- function(x)
{
lenx <- length(x)
for(i in my_vector)
{
mini <- (i - 1) + which.min([i:lenx])
start_ <- seq_len(i - 1)
x <- c(x[start_], x[mini], x[-c(start_, mini)])
}
x
}
selectionsort.loop <- function(x)
{
lenx <- length(x)
for(i in seq_along(x))
{
mini <- (i - 1) + which.min(x[i:lenx])
start_ <- seq_len(i-1)
x <- c(x[start_], x[mini], x[-c(start_, mini)])
}
x
}
selectionsort.loop <- function(x)
{
lenx <- length(x)
for(i in seq_along(x))
{
mini <- (i - 1) + which.min(x[i:lenx])
start_ <- seq_len(i-1)
x <- c(x[start_], x[mini], x[-c(start_, mini)])
}
x
}
selectionsort.loop(my_vector)
?for
?function
##naming the loop
selectionsort.loop <- function(x) {
#N is going to be the full length, this is how far the function should work
N = length(x)
#go through the whole thing
for(i in 1:N) {
min = i
#
for(j in i:N) {
if(v[j] < v[min]) {
min = j
}
}
temp = v[i]
v[i] = v[min]
v[min] = temp
}
return v;
}
##naming the loop
selectionsort.loop <- function(x) {
#N is going to be the full length, this is how far the function should work
N = length(x)
#go through the whole thing
for(i in 1:N) {
min = i
#
for(j in i:N) {
if(v[j] < v[min]) {
min = j
}
}
temp = v[i]
v[i] = v[min]
v[min] = temp
}
return v
}
##naming the loop
selectionsort.loop <- function(x) {
#N is going to be the full length, this is how far the function should work
N = length(x)
#go through the whole thing
for(i in 1:N) {
min = i
#
for(j in i:N) {
if(v[j] < v[min]) {
min = j
}
temp = v[i]
v[i] = v[min]
v[min] = temp
}
return v
}
##naming the loop
selectionsort.loop <- function(x) {
#N is going to be the full length, this is how far the function should work
N = length(x)
#go through the whole thing
for(i in 1:N) {
min = i
#
for(j in i:N) {
if(v[j] < v[min]) {
min = j
}
}
temp = v[i]
v[i] = v[min]
v[min] = temp
}
return v
}
my_vector <- c(10,5,2,6,8,4,1,9,3,7)
##naming the loop
selectionsort.loop <- function(x) {
#N is going to be the full length, this is how far the function should work
N = length(x)
#go through the whole thing
for(i in 1:N) {
min = i
#
for(j in i:N) {
if(v[j] < v[min]) {
min = j
}
}
temp = v[i]
v[i] = v[min]
v[min] = temp
}
return(v)
}
selectionsort.loop(my_vector)
my_vector <- c(10,5,2,6,8,4,1,9,3,7)
##naming the loop
selectionsort.loop <- function(x) {
#N is going to be the full length, this is how far the function should work
N = length(x)
#go through the whole thing
for(i in 1:N) {
min = i
#
for(j in i:N) {
if(v[j] < v[min]) {
min = j
}
}
temp = v[i]
v[i] = v[min]
v[min] = temp
}
return(v)
}
selectionsort.loop(my_vector)
##naming the loop
selectionsort.loop <- function(v) {
#N is going to be the full length, this is how far the function should work
N = length(v)
#go through the whole thing
for(i in 1:N) {
min = i
#
for(j in i:N) {
if(v[j] < v[min]) {
min = j
}
}
temp = v[i]
v[i] = v[min]
v[min] = temp
}
return(v)
}
selectionsort.loop(my_vector)
##naming the loop
selectionsort.loop <- function(v) {
#N is going to be the full length, this is how far the function should work
N = length(v)
Position = 1:N
#go through the whole thing
for(i in 1:N) {
min = i
#
for(j in i:N) {
if(v[j] < v[min]) {
min = j
}
}
temp = v[i]
v[i] = v[min]
v[min] = temp
temp2 = Position[i]
Position[i] = Position[min]
Position[min] = temp2
}
return(v)
}
selectionsort.loop(my_vector)
##naming the loop
selectionsort.loop <- function(v) {
#N is going to be the full length, this is how far the function should work
N = length(v)
Position = 1:N
#go through the whole thing
for(i in 1:N) {
min = i
#
for(j in i:N) {
if(v[j] < v[min]) {
min = j
}
}
temp = v[i]
v[i] = v[min]
v[min] = temp
temp2 = Position[i]
Position[i] = Position[min]
Position[min] = temp2
}
return(v)
return(Position)
}
##naming the loop
selectionsort.loop <- function(v) {
#N is going to be the full length, this is how far the function should work
N = length(v)
Position = 1:N
#go through the whole thing
for(i in 1:N) {
min = i
#
for(j in i:N) {
if(v[j] < v[min]) {
min = j
}
}
temp = v[i]
v[i] = v[min]
v[min] = temp
temp2 = Position[i]
Position[i] = Position[min]
Position[min] = temp2
}
return(v)
return(Position)
}
selectionsort.loop(my_vector)
selectionsort.loop(my_vector)
##naming the loop
selectionsort.loop <- function(v) {
#N is going to be the full length, this is how far the function should work
N = length(v)
Position = 1:N
#go through the whole thing
for(i in 1:N) {
min = i
#
for(j in i:N) {
if(v[j] < v[min]) {
min = j
}
}
temp = v[i]
v[i] = v[min]
v[min] = temp
temp2 = Position[i]
Position[i] = Position[min]
Position[min] = temp2
}
#return(v)
return(Position)
}
selectionsort.loop(my_vector)
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
